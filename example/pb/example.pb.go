// Code generated by protoc-gen-go.
// source: example.proto
// DO NOT EDIT!

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	Query
	Person
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Query struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AgeFrom int32  `protobuf:"varint,2,opt,name=ageFrom" json:"ageFrom,omitempty"`
	AgeTo   int32  `protobuf:"varint,3,opt,name=ageTo" json:"ageTo,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Query) GetAgeFrom() int32 {
	if m != nil {
		return m.AgeFrom
	}
	return 0
}

func (m *Query) GetAgeTo() int32 {
	if m != nil {
		return m.AgeTo
	}
	return 0
}

type Person struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterType((*Query)(nil), "Query")
	proto.RegisterType((*Person)(nil), "Person")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Example service

type ExampleClient interface {
	// Simple request/response.
	GetPerson(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Person, error)
	// Server streaming (ignored).
	ListPeople(ctx context.Context, in *Query, opts ...grpc.CallOption) (Example_ListPeopleClient, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) GetPerson(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := grpc.Invoke(ctx, "/Example/GetPerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) ListPeople(ctx context.Context, in *Query, opts ...grpc.CallOption) (Example_ListPeopleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Example_serviceDesc.Streams[0], c.cc, "/Example/ListPeople", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleListPeopleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_ListPeopleClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type exampleListPeopleClient struct {
	grpc.ClientStream
}

func (x *exampleListPeopleClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Example service

type ExampleServer interface {
	// Simple request/response.
	GetPerson(context.Context, *Query) (*Person, error)
	// Server streaming (ignored).
	ListPeople(*Query, Example_ListPeopleServer) error
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Example/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).GetPerson(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_ListPeople_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).ListPeople(m, &exampleListPeopleServer{stream})
}

type Example_ListPeopleServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type exampleListPeopleServer struct {
	grpc.ServerStream
}

func (x *exampleListPeopleServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _Example_GetPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPeople",
			Handler:       _Example_ListPeople_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xf2, 0xe6, 0x62, 0x0d, 0x2c, 0x4d,
	0x2d, 0xaa, 0x14, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8, 0x13, 0xd3, 0x53, 0xdd, 0x8a, 0xf2, 0x73, 0x25, 0x98,
	0x14, 0x18, 0x35, 0x58, 0x83, 0x60, 0x5c, 0x21, 0x11, 0x2e, 0xd6, 0xc4, 0xf4, 0xd4, 0x90, 0x7c,
	0x09, 0x66, 0xb0, 0x38, 0x84, 0xa3, 0xa4, 0xc7, 0xc5, 0x16, 0x90, 0x5a, 0x54, 0x9c, 0x9f, 0x87,
	0xd5, 0x34, 0x01, 0x2e, 0xe6, 0xc4, 0xf4, 0x54, 0xa8, 0x49, 0x20, 0xa6, 0x91, 0x0f, 0x17, 0xbb,
	0x2b, 0xc4, 0x35, 0x42, 0x72, 0x5c, 0x9c, 0xee, 0xa9, 0x25, 0x50, 0xdd, 0x6c, 0x7a, 0x60, 0x37,
	0x49, 0xb1, 0xeb, 0x41, 0x04, 0x94, 0x18, 0x84, 0x14, 0xb9, 0xb8, 0x7c, 0x32, 0x8b, 0x4b, 0x02,
	0x52, 0xf3, 0x41, 0xaa, 0x31, 0x15, 0x18, 0x30, 0x26, 0xb1, 0x81, 0x7d, 0x64, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x0f, 0xc8, 0x1a, 0x75, 0xe2, 0x00, 0x00, 0x00,
}
